syntax = "proto3";
package proto;

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

message Empty {}

message KeyRequest {
    string namespace = 1;
    string apiVersion = 2;
    string kind = 3;
    string name = 4;
    google.protobuf.BytesValue labelSelector = 5;
}

message ListResponse {
    repeated bytes objects = 1;
}

message GetResponse {
    bytes object = 1;
}

message UpdateRequest {
    bytes object = 1;
}

message UpdateResponse {

}

message CreateRequest {
    bytes object = 1;
}

message CreateResponse {

}

message PortForwardRequest {
    string namespace = 1;
    string podName = 2;
    string containerName = 3;
    uint32 portNumber = 4;
}

message PortForwardResponse {
    string portForwardID = 1;
    uint32 portNumber = 2;
}

message CancelPortForwardRequest {
    string portForwardID = 1;
}

message NamespacesResponse {
    repeated string namespaces = 1;
}

message AlertRequest {
    string type = 1;
    string message = 2;
    google.protobuf.Timestamp expiration = 3;
    string clientID = 4;
}

service Dashboard {
    rpc List(KeyRequest) returns (ListResponse);
    rpc Get(KeyRequest) returns (GetResponse);
    rpc Update(UpdateRequest) returns (UpdateResponse);
    rpc Create(CreateRequest) returns (CreateResponse);
    rpc PortForward(PortForwardRequest) returns (PortForwardResponse);
    rpc CancelPortForward(CancelPortForwardRequest) returns (Empty);
    rpc ListNamespaces(Empty) returns (NamespacesResponse);
    rpc ForceFrontendUpdate(Empty) returns(Empty);
    rpc SendAlert(AlertRequest) returns(Empty);
}

message ObjectRequest {
    bytes object = 1;
    string text = 2;
}

message ObjectWithQueryRequest {
    bytes object = 1;
    string text = 2;
    bytes query = 3;
}

message GVKRequest {
    string namespace = 1;
    string apiVersion = 2;
    string kind = 3;
    string name = 4;
    string text = 5;
}

message OwnerRequest {
    bytes parent = 1;
    bytes controllerRef = 2;
}

message ComponentResponse {
    bytes linkComponent = 1;
}

service LinkGenerator {
    rpc ForObject(ObjectRequest) returns (ComponentResponse);
    rpc ForObjectWithQuery(ObjectWithQueryRequest) returns (ComponentResponse);
    rpc ForGVK(GVKRequest) returns (ComponentResponse);
    rpc ForOwner(OwnerRequest) returns (ComponentResponse);
}
